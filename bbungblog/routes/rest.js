var mysql = require('mysql');var request = require('request');var pooling = require('mysql-simple-pool');var poolModule = require('generic-pool');var jwt = require('express-jwt');var _ = require('underscore');var logger = require('winston');var pool = mysql.createPool({	host     : 'netprime.airplug.com', // 기본포트가 3306으로 되어있는 경우에는 포트 설정이 필요없다.	// host     : '127.0.0.1', // 기본포트가 3306으로 되어있는 경우에는 포트 설정이 필요없다.	user     : 'mhb8436',	password : 'mhb84368044',	port	 : 3306,	database : 'test',	connectionLimit : 20,	multipleStatements: true,	waitForconnections : false});var secret = "showmethemoney0621!!!";	String.prototype.replaceAll = function (find, replace) {    var str = this;    return str.replace(new RegExp(find, 'g'), replace);};exports.logout = function(req, res){	logger.info('/logout' + req.session.user_id);	if(req.session.user_id){		logger.info('req.session.user_id [' + req.session.user_id + '] is existed..');		delete req.session.user_id		delete req.session.is_super		res.redirect('/login');	}}exports.login = function(req, res){	var sqlstr =  		" select * from admin where opid = '"+req.body.userid+"' and pwd = '"+req.body.password+"' and svcname='ctrladm' " ;	logger.info(sqlstr);	pool.getConnection(function(err, connection){		var query = connection.query(sqlstr,function(error, rows){			try{				var aa = false;				logger.info(rows);				if(rows && rows.length > 0){					logger.info(req.body.userid + ' & ' + req.body.password  + ' is login user '); 					aa= true;				} else{					logger.info('rows is null or length is 0 ')					aa= false;				}				logger.info('/login' + req.session.user_id);				if(req.session.user_id){					logger.info('if(req.session){');					res.redirect('/');				}else{					logger.info('}else{' + req.body.userid + '} {' +  req.body.password + '}');					// if(req.body.userid && req.body.password && req.body.userid =='admin' && req.body.password == 'password'){					if(req.body.userid && req.body.password && aa){						logger.info('if(req.body.id');						req.session.user_id = req.body.userid;						if(rows){							req.session.is_super = (rows[0].orgprefix =='super'?true:false);							} 						res.redirect('/');					}else{						logger.info('if(req.query.id else{');						res.render('login.jade');					}				}				connection.release();				return aa;			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};var auth_check = function(req, res ) {	logger.info('auth_check session id is ' + req.session.user_id);	if(!req.session.user_id){		// res.redirect('/login');		res.status(401).send(401)	}	// res.render('index.jade', {title:'title', userid:req.session.user_id, is_super:req.session.is_super});}//////////////////////////////////////////////////////////////////////////////////////////// app.get('/nes/api/v1.0/isp/:country/:city/:isp/:bin/:sdate/:edate', rest.getIspData); //////////////////////////////////////////////////////////////////////////////////////////exports.list_bbmodel = function(req, res){	// auth_check(req, res);		// logger.info(req.query);	logger.info('list_bbmodel begin....');		var draw = req.query.draw;	var start = req.query.start;	var length = req.query.length;	logger.info(req.query);	logger.info(req.query.order[0].column);	logger.info(req.query.order[0].dir);	var orderstr = " order by " + (parseInt(req.query.order[0].column) +1 ) + " " +  req.query.order[0].dir;	// logger.info(req.query.value);	// logger.info(req.query.columns[1].search.value);		var searchstrs = [];	if(req.query.columns[1].search.value.length){		searchstrs.push(" m.plmnid like '%"+req.query.columns[1].search.value+"%' ");	}	if(req.query.columns[2].search.value.length){		searchstrs.push(" m.devmodel like '%"+req.query.columns[2].search.value+"%' ");		}	if(req.query.columns[3].search.value.length){		searchstrs.push(" m.mosver like '%"+req.query.columns[3].search.value+"%' ");		}	if(req.query.columns[4].search.value.length){		searchstrs.push(" t.playServiceMode like '%"+req.query.columns[4].search.value+"%' ");		}	if(req.query.columns[5].search.value.length){		searchstrs.push(" m.BBmode like '%"+req.query.columns[5].search.value+"%' ");		}	if(req.query.columns[6].search.value.length){		searchstrs.push(" m.BBtype like '%"+req.query.columns[6].search.value+"%' ");		}	if(req.query.columns[7].search.value.length){		searchstrs.push(" (t.ihipri3gS+t.ihipri4gS+t.imms3gS + t.imms4gS ) >= "+req.query.columns[7].search.value+" ");	}	if(req.query.columns[8].search.value.length){		searchstrs.push(" (t.ihipri3gF+t.ihipri4gF+t.imms3gF + t.imms4gF) >= "+req.query.columns[8].search.value+" ");	}	var searcher = "";	if(searchstrs.length>0)		searcher = " and (" + searchstrs.join(" and ") + ") ";	var sqlstr = 		" SELECT concat('<span style=\"padding-right:10px;\" class=\"glyphicon glyphicon-folder-open\"></span><b>', m.plmnid,'   /  ', m.devmodel,'   /    ',m.mosver, '</b><span style=\"padding-left:10px;\">(mcc+mnc / model code / osversion)</span>') as groupkey, \n"+		"        m.plmnid, \n"+		"        m.devmodel, \n"+		"        m.mosver, \n"+		"        t.playServiceMode, \n"+		"        m.BBmode AS curBBmode, \n"+		"        m.BBtype AS curBBtype, \n"+		"        (t.ihipri3gS+t.ihipri4gS+t.imms3gS + t.imms4gS) as totalS, \n"+		" 			 (t.ihipri3gF+t.ihipri4gF+t.imms3gF + t.imms4gF) as totalF, \n"+		"        ifnull( (t.ihipri3gF+t.ihipri4gF+t.imms3gF + t.imms4gF )/(t.ihipri3gS+t.ihipri4gS+t.imms3gS + t.imms4gS+t.ihipri3gF+t.ihipri4gF+t.imms3gF + t.imms4gF)*100,0) as failRate \n"+		" FROM bbmodel m  \n"+		"   ,(SELECT t.devmodel, \n"+		"           t.mosver, \n"+		"           t.plmnid, \n"+		"           t.mostype, \n"+		"           t.BBmode, \n"+		"           t.playServiceMode, \n"+		"           ifnull(sum(w.ihipri3gS),0) AS ihipri3gS, \n"+		"           ifnull(sum(w.ihipri3gF),0) AS ihipri3gF, \n"+		"           ifnull(sum(w.ihipri4gS),0) AS ihipri4gS, \n"+		"           ifnull(sum(w.ihipri4gF),0) AS ihipri4gF, \n"+		"           ifnull(sum(w.imms3gS),0) AS imms3gS, \n"+		"           ifnull(sum(w.imms3gF),0) AS imms3gF, \n"+		"           ifnull(sum(w.imms4gS),0) AS imms4gS, \n"+		"           ifnull(sum(w.imms4gF),0) AS imms4gF \n"+		"    FROM bbtest t left join bbtest_wk w force index (primary) on 1 AND t.devmodel = w.devmodel AND t.mosver=w.mosver AND t.plmnid=w.plmnid AND t.BBmode=w.BBmode  AND t.playServiceMode=w.playServiceMode \n"+		" AND w.yweek >= yearweek(now()) - 4 \n"+		"    GROUP BY t.devmodel, \n"+		"             t.mosver, \n"+		"             t.plmnid, \n"+		"             t.mostype, \n"+		"             t.BBmode, \n"+		"             t.playServiceMode) t  \n"+		" WHERE 1 \n"+		" and m.devmodel = t.devmodel \n"+		" and m.mosver = t.mosver \n"+		" and m.plmnid = t.plmnid \n"+		" and m.mostype = t.mostype \n"+		searcher + 		// " ORDER BY groupkey \n"+		orderstr + 		" limit " + length + " offset " + (parseInt(length)+parseInt(start)-parseInt(length));	var totalsql = "select count(*) as total from bbmodel m, bbtest t where m.devmodel=t.devmodel and m.mosver=t.mosver and m.plmnid=t.plmnid and m.mostype=t.mostype " + searcher;	logger.info(sqlstr);		pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				// logger.info(rows);				var data = [];				_.each(rows, function(row){					var d =[];					_.each(row, function(r){						d.push(r);					});					data.push(d);				});				fnDrawCallback(totalsql, req, res, data, function(complete){					// logger.info('----- complete is ------');					// logger.info(complete);					res.json(complete);				});								if(rows) logger.info('[list_bbmodel]=>' + rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};var fnDrawCallback = function(sqlstr, req, res, data, callback){	// logger.info(sqlstr);		// logger.info(data);	pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				var result = {};				result.data = data;				result.draw = req.query.draw;				result.recordsFiltered = rows[0].total;				result.recordsTotal = rows[0].total;				callback(result);				if(rows) logger.info('[fnDrawCallback]=>' + rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.list_menus = function(req, res){	auth_check(req, res);		// logger.info(req.query);	var sqlstr = ""+		"select concat(id,'-',name,'-',url) as parent, GetFamilyTree(id,'') as childs \n"+		"from menus where parent_id = 0 and svcname = 'bbdecision' and use_yn='Y' \n";	logger.info(sqlstr);		pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				res.json(rows);				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.list_weekfail = function(req, res){	auth_check(req, res);		var draw = req.query.draw;	var start = req.query.start;	var length = req.query.length;	logger.info(req.query);	logger.info(req.query.order[0].column);	logger.info(req.query.order[0].dir);	var orderstr = " order by " + (parseInt(req.query.order[0].column) +1 ) + " " +  req.query.order[0].dir;	var searchstrs = [];	if(req.query.columns[0].search.value.length){		searchstrs.push(" w.plmnid like '%"+req.query.columns[0].search.value+"%' ");	}	if(req.query.columns[1].search.value.length){		searchstrs.push(" w.devmodel like '%"+req.query.columns[1].search.value+"%' ");		}	if(req.query.columns[2].search.value.length){		searchstrs.push(" w.mosver like '%"+req.query.columns[2].search.value+"%' ");		}	if(req.query.columns[3].search.value.length){		searchstrs.push(" d.pop >= "+req.query.columns[3].search.value+" ");		}	if(req.query.columns[4].search.value.length){		searchstrs.push(" (w.min_imms3gS + w.min_ihipri4gS + w.min_imms3gS+w.min_imms4gS ) >= "+req.query.columns[4].search.value+" ");		}	if(req.query.columns[5].search.value.length){		searchstrs.push(" (w.min_imms3gF + w.min_ihipri4gF + w.min_imms3gF+w.min_imms4gF ) >= "+req.query.columns[5].search.value+" ");		}	if(req.query.columns[6].search.value.length){		searchstrs.push(" (w.max_imms3gS + w.max_ihipri4gS + w.max_imms3gS+w.max_imms4gS ) >= "+req.query.columns[6].search.value+" ");		}	if(req.query.columns[7].search.value.length){		searchstrs.push(" (w.max_imms3gF + w.max_ihipri4gF + w.max_imms3gF+w.max_imms4gF ) >= "+req.query.columns[7].search.value+" ");		}	if(req.query.columns[8].search.value.length){		searchstrs.push(" (w.max_imms3gF + w.max_ihipri4gF + w.max_imms3gF+w.max_imms4gF ) / (w.max_imms3gF + w.max_ihipri4gF + w.max_imms3gF+w.max_imms4gF  + w.max_imms3gS + w.max_ihipri4gS + w.max_imms3gS+w.max_imms4gS ) * 100 >= "+req.query.columns[8].search.value+" ");		}	var searcher = "";	if(searchstrs.length>0)		searcher = " and (" + searchstrs.join(" and ") + ") ";	var sqllimit = " limit " + length + " offset " + (parseInt(length)+parseInt(start)-parseInt(length));	var sqlstr = ""+							" SELECT \n"+							" w.plmnid, w.devmodel, w.mosver, d.pop AS population, \n"+							" (w.min_imms3gS + w.min_ihipri4gS + w.min_imms3gS+w.min_imms4gS ) AS prevS, \n"+							" (w.min_imms3gF + w.min_ihipri4gF + w.min_imms3gF+w.min_imms4gF ) AS prevF, \n"+							// " (w.min_imms3gF + w.min_ihipri4gF + w.min_imms3gF+w.min_imms4gF ) / (w.min_imms3gF + w.min_ihipri4gF + w.min_imms3gF+w.min_imms4gF  + w.min_imms3gS + w.min_ihipri4gS + w.min_imms3gS+w.min_imms4gS ) * 100 AS prevR, \n"+							" (w.max_imms3gS + w.max_ihipri4gS + w.max_imms3gS+w.max_imms4gS ) AS curS, \n"+							" (w.max_imms3gF + w.max_ihipri4gF + w.max_imms3gF+w.max_imms4gF ) AS curF, \n"+							" (w.max_imms3gF + w.max_ihipri4gF + w.max_imms3gF+w.max_imms4gF ) / (w.max_imms3gF + w.max_ihipri4gF + w.max_imms3gF+w.max_imms4gF  + w.max_imms3gS + w.max_ihipri4gS + w.max_imms3gS+w.max_imms4gS ) * 100 AS curR, \n"+							" group_concat( concat( yweek,'- ihipri3g:[',ihipri3gF1,',',ihipri3gF2,',',ihipri3gF3,',',ihipri3gF4 , '], ihipri4g:[', ihipri4gF1,',',ihipri4gF2,',',ihipri4gF3,',',ihipri4gF4,'] imms3g:[',imms3gF1,',',imms3gF2,',',imms3gF3,',',imms3gF4,'] imms4g:[', imms4gF1,',',imms4gF2,',',imms4gF3,',',imms4gF4,']') SEPARATOR '<br/>') AS hist \n"+							" FROM (SELECT devmodel, mosver, plmnid, count(*) AS pop FROM mdev GROUP BY devmodel, mosver, plmnid) d, ( \n"+							" SELECT w.devmodel, w.mosver, w.plmnid, w.mostype, sum(w.ihipri3gS) AS ihipri3gS, \n"+							" sum(w.ihipri3gF) AS ihipri3gF, sum(w.ihipri4gS) AS ihipri4gS, sum(w.ihipri4gF) AS ihipri4gF, \n"+							" sum(w.imms3gS) AS imms3gS, sum(w.imms3gF) AS imms3gF, sum(w.imms4gS) AS imms4gS, sum(w.imms4gF) AS imms4gF, \n"+							" min(w.ihipri3gF) AS min_ihipri3gF, min(w.ihipri4gF) AS min_ihipri4gF, min(w.imms3gF) AS min_imms3gF, min(w.imms4gF) AS min_imms4gF, \n"+							" min(w.ihipri3gS) AS min_ihipri3gS, min(w.ihipri4gS) AS min_ihipri4gS, min(w.imms3gS) AS min_imms3gS, min(w.imms4gS) AS min_imms4gS, \n"+							" max(w.ihipri3gF) AS max_ihipri3gF, max(w.ihipri4gF) AS max_ihipri4gF, max(w.imms3gF) AS max_imms3gF, min(w.imms4gF) AS max_imms4gF, \n"+							" max(w.ihipri3gS) AS max_ihipri3gS, max(w.ihipri4gS) AS max_ihipri4gS, max(w.imms3gS) AS max_imms3gS, min(w.imms4gS) AS max_imms4gS, \n"+							" min(w.yweek) AS min_week, max(w.yweek) AS max_week \n"+							" FROM bbtest_wk w where 1 \n"+							" GROUP BY devmodel, mosver, plmnid, mostype \n"+							" ) w LEFT JOIN bbtest_fail_wk f ON w.devmodel = f.devmodel AND w.mosver = f.mosver AND w.plmnid = f.plmnid AND w.mostype = f.mostype \n"+							" WHERE w.devmodel = d.devmodel AND w.mosver = d.mosver AND w.plmnid = d.plmnid \n"+							searcher + 							" GROUP BY w.devmodel, w.mosver, w.plmnid, w.mostype, w.ihipri3gS, w.ihipri3gF, w.ihipri4gS, w.ihipri4gF, w.imms3gS, w.imms3gF, w.imms4gS, w.imms4gF \n" +							orderstr;							 	var totalsql = "select count(*) as total from  (" + sqlstr + ") x";	logger.info(sqlstr);		pool.getConnection(function(err, connection){		var query = connection.query(sqlstr + sqllimit , function(error, rows){			try{				var data = [];				_.each(rows, function(row){					var d =[];					_.each(row, function(r){						d.push(r);					});					data.push(d);				});				fnDrawCallback(totalsql, req, res, data, function(complete){					res.json(complete);				});				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.list_summary = function(req, res){	auth_check(req, res);		// logger.info(req.query);	var sqlstr = ""+	 " select 'date', 'newModel', 'testModel' union all \n"+	 " select substring(y.ymd_char, 3,6) as date, ifnull(b.count,0) as modelcount , ifnull(t.count,0)  as testcount \n"+	 " from copy_ymd y left join ( \n"+	 " select from_unixtime(b.lstuptmp, '%Y-%m-%d') as lstuptmp, count(distinct concat(b.devmodel, b.mosver, b.plmnid, b.mostype)) as count  \n"+	 " from bbmodel b \n"+	 " where 1 \n"+	 " group by from_unixtime(b.lstuptmp, '%Y-%m-%d') ) b on date_format(y.ymd_date, '%Y-%m-%d')  = b.lstuptmp \n"+	 " left join ( \n"+	 " select from_unixtime(t.lstuptmp, '%Y-%m-%d') as lstuptmp, count(distinct concat(t.devmodel, t.mosver, t.plmnid, t.mostype)) as count \n"+	 " from bbtest t \n"+	 " where 1 \n"+	 " group by from_unixtime(t.lstuptmp, '%Y-%m-%d') ) t on date_format(y.ymd_date, '%Y-%m-%d')  = t.lstuptmp \n"+	 " where 1  \n"+	 " and y.ymd_date <= CURDATE()  \n"+	 " and y.ymd_date > DATE_ADD(CURDATE(), interval -14 DAY)  \n";		logger.info(sqlstr);			pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				res.json(rows);				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.update_bbmodel = function(req, res){	auth_check(req, res);		logger.info('--- exports.update_bbmodel = function(req, res){ --- ');	logger.info(req.body);	var bbmode = req.body.BBmode.indexOf('|') > 0 ? req.body.BBmode.split('|')[1] : req.body.BBmode;	var bbtype = req.body.BBtype.indexOf('|') > 0 ? req.body.BBtype.split('|')[1] : req.body.BBtype;	var insbbmodelsql = 		" insert into bbmodel(devmodel, mosver, plmnid, mostype, BBmode, BBtype, fstuptmp, lstuptmp, lstuptid) "+		" values('"+req.body.devmodel+"','"+req.body.mosver+"', '"+req.body.plmnid+"', '"+req.body.mostype+"', '"+bbmode+"', '"+bbtype+"', from_unixtime(now()), from_unixtime(now()), '"+req.session.user_id+"' ) "+		" on duplicate key update BBmode = '"+bbmode+"', BBtype = '"+bbtype+"', lstuptmp=from_unixtime(now()), lstuptid = '"+req.session.user_id+"' ;";  var insbbtestsql = 		" insert into bbmodel_hist(devmodel,mosver,plmnid,mostype,uptmp,dm,BBmode,BBtype,ihipri3gS,ihipri3gF,ihipri4gS,ihipri4gF,imms3gS,imms3gF,imms4gS,imms4gF,uptid) \n"+		" select m.devmodel,m.mosver,m.plmnid,m.mostype,unix_timestamp(now()),'I',m.BBmode,m.BBtype, \n"+		" ifnull(t.ihipri3gS,0),ifnull(t.ihipri3gF,0),ifnull(t.ihipri4gS,0),ifnull(t.ihipri4gF,0),ifnull(t.imms3gS,0),ifnull(t.imms3gF,0),ifnull(t.imms4gS,0),ifnull(t.imms4gF,0) ,'?' \n"+		" from bbmodel m left join bbtest t on  1  \n"+		" and m.devmodel = t.devmodel and m.mosver = t.mosver and m.plmnid = t.plmnid and m.mostype = t.mostype and m.BBmode = t.BBmode \n"+		" where 1  \n"+		" and  m.devmodel = '"+req.body.devmodel+"' and m.mosver = '"+req.body.mosver+"' and m.plmnid = '"+req.body.plmnid+"' and m.mostype ='"+req.body.mostype+"'  ; \n";	var 	sqlstr = insbbmodelsql + insbbtestsql;	logger.info(sqlstr);		pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				res.json({'success':true});				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.update_all_bbmodel = function(req, res){	auth_check(req, res);		logger.info('--- exports.update_all_bbmodel --- ');	logger.info(req.body);	// q.filter = $scope.searchers;	// q.columns = columns;	// q.value = value;	var searchstrs = [];	_.each(req.body.filter, function(d, i){		if(i == 0 && d != ''){			searchstrs.push(" m.plmnid like '%"+d+"%' ");		}else if(i == 1 && d != ''){			searchstrs.push(" m.devmodel like '%"+d+"%' ");			}else if(i == 2 && d != ''){			searchstrs.push(" m.mosver like '%"+d+"%' ");			}else if(i == 3 && d != ''){			searchstrs.push(" t.playServiceMode like '%"+d+"%' ");			}else if(i == 4 && d != ''){			searchstrs.push(" m.BBmode like '%"+d+"%' ");			}else if(i == 5 && d != ''){			searchstrs.push(" m.BBtype like '%"+d+"%' ");			}else if(i == 6 && d != ''){			searchstrs.push(" (t.ihipri3gS+t.ihipri4gS+t.imms3gS + t.imms4gS ) >= "+d+" ");		}else if(i == 7 && d != ''){			searchstrs.push(" (t.ihipri3gF+t.ihipri4gF+t.imms3gF + t.imms4gF) >= "+d+" ");		}	});	logger.info('------ searchstrs length is ' + searchstrs.length);	logger.info(searchstrs);	if(searchstrs.length < 2){		res.status(203).send('203');	}	var searcher = "";	if(searchstrs.length>0)		searcher = " and (" + searchstrs.join(" and ") + ") ";	var bbmodestr = req.body.columns =='bbmode' ? "'"+req.body.value+"'":"BBmode";	var bbtypestr = req.body.columns =='bbtype' ? "'"+req.body.value+"'":"BBtype";	var insbbmodelsql = 		" insert into bbmodel(devmodel, mosver, plmnid, mostype, BBmode, BBtype, lstuptmp, lstuptid) \n"+		"  SELECT  \n"+		"         m.devmodel,  \n"+		"         m.mosver,  \n"+		"         m.plmnid,  \n"+		"         m.mostype, \n"+		"         "+bbmodestr+" as BBmode,  \n"+		"         "+bbtypestr+" as BBtype,  \n"+		"         unix_timestamp(now()) as lstuptmp,  \n"+		"         '"+req.session.user_id+"' lstuptid  \n"+		"  FROM bbmodel m   \n"+		"    ,(SELECT t.devmodel, \n"+ 		"            t.mosver,  \n"+		"            t.plmnid,  \n"+		"            t.mostype,  \n"+		// "            t.BBmode,  \n"+		"            t.playServiceMode,  \n"+		"            ifnull(sum(w.ihipri3gS),0) AS ihipri3gS,  \n"+		"            ifnull(sum(w.ihipri3gF),0) AS ihipri3gF,  \n"+		"            ifnull(sum(w.ihipri4gS),0) AS ihipri4gS,  \n"+		"            ifnull(sum(w.ihipri4gF),0) AS ihipri4gF,  \n"+		"            ifnull(sum(w.imms3gS),0) AS imms3gS,  \n"+		"            ifnull(sum(w.imms3gF),0) AS imms3gF,  \n"+		"            ifnull(sum(w.imms4gS),0) AS imms4gS,  \n"+		"            ifnull(sum(w.imms4gF),0) AS imms4gF  \n"+		"     FROM bbtest t left join bbtest_wk w force index (primary) on 1 AND t.devmodel = w.devmodel AND t.mosver=w.mosver AND t.plmnid=w.plmnid AND t.BBmode=w.BBmode  AND t.playServiceMode=w.playServiceMode  \n"+		"  AND w.yweek >= yearweek(now()) - 4  \n"+		"     GROUP BY t.devmodel,  \n"+		"              t.mosver,  \n"+		"              t.plmnid,  \n"+		"              t.mostype,  \n"+		"              t.BBmode,  \n"+		"              t.playServiceMode) t   \n"+		"  WHERE 1  \n"+		"  and m.devmodel = t.devmodel  \n"+		"  and m.mosver = t.mosver  \n"+		"  and m.plmnid = t.plmnid  \n"+		"  and m.mostype = t.mostype  \n"+		// "  and m.devmodel like '%GT-I8150%' and m.mosver like '%2.3.6%'and m.plmnid like '%22288%' \n"+		searcher + 		"  group by  \n"+		"         m.devmodel,  \n"+		"         m.mosver,  \n"+		"         m.plmnid,  \n"+		"         m.mostype , \n"+		"         m.BBmode,  \n"+		"         m.BBtype \n"+		"  on duplicate key update BBmode = "+bbmodestr+", BBtype = "+bbtypestr+", lstuptmp=unix_timestamp(now()), lstuptid = '"+req.session.user_id+"'  \n"+		"  ; \n";	 	var insbbtestsql = 		" insert into bbmodel_hist(devmodel,mosver,plmnid,mostype,uptmp,dm,BBmode,BBtype,ihipri3gS,ihipri3gF,ihipri4gS,ihipri4gF,imms3gS,imms3gF,imms4gS,imms4gF,uptid) \n"+		" SELECT  \n"+		"        m.devmodel,  \n"+		"        m.mosver,  \n"+		"        m.plmnid,  \n"+		"        m.mostype,      \n"+   		"        unix_timestamp(now()) as uptmp,  \n"+		"        'I' as dm, \n"+		"        t.BBmode, \n"+		"        m.BBtype,  \n"+		"        sum(ihipri3gS) as ihipri3gS, \n"+		"        sum(ihipri3gF) as ihipri3gF, \n"+		"        sum(ihipri4gS) as ihipri4gS, \n"+		"        sum(ihipri4gF) as ihipri4gF, \n"+		"        sum(imms3gS) as imms3gS, \n"+		"        sum(imms3gF) as imms3gF, \n"+		"        sum(imms4gS) as imms4gS, \n"+		"        sum(imms4gF) as imms4gF, \n"+		"        '"+req.session.user_id+"' as uptid  \n"+		" FROM bbmodel m   \n"+		"   ,(SELECT t.devmodel,  \n"+		"           t.mosver,  \n"+		"           t.plmnid,  \n"+		"           t.mostype,  \n"+		"           t.BBmode,  \n"+		"           t.playServiceMode,  \n"+		"           ifnull(sum(w.ihipri3gS),0) AS ihipri3gS,  \n"+		"           ifnull(sum(w.ihipri3gF),0) AS ihipri3gF,  \n"+		"           ifnull(sum(w.ihipri4gS),0) AS ihipri4gS,  \n"+		"           ifnull(sum(w.ihipri4gF),0) AS ihipri4gF,  \n"+		"           ifnull(sum(w.imms3gS),0) AS imms3gS,  \n"+		"           ifnull(sum(w.imms3gF),0) AS imms3gF,  \n"+		"           ifnull(sum(w.imms4gS),0) AS imms4gS,  \n"+		"           ifnull(sum(w.imms4gF),0) AS imms4gF  \n"+		"    FROM bbtest t left join bbtest_wk w force index (primary) on 1 AND t.devmodel = w.devmodel AND t.mosver=w.mosver AND t.plmnid=w.plmnid AND t.BBmode=w.BBmode  AND t.playServiceMode=w.playServiceMode  \n"+		" AND w.yweek >= yearweek(now()) - 4  \n"+		"    GROUP BY t.devmodel,  \n"+		"             t.mosver,  \n"+		"             t.plmnid,  \n"+		"             t.mostype,  \n"+		"             t.BBmode,  \n"+		"             t.playServiceMode) t   \n"+		" WHERE 1  \n"+		" and m.devmodel = t.devmodel  \n"+		" and m.mosver = t.mosver  \n"+		" and m.plmnid = t.plmnid  \n"+		" and m.mostype = t.mostype  \n"+		// " and m.devmodel like '%GT-I8150%' and m.mosver like '%2.3.6%'and m.plmnid like '%22288%' \n"+		searcher + 		" group by \n"+		"        m.devmodel,  \n"+		"        m.mosver,  \n"+		"        m.plmnid,  \n"+		"        m.mostype, \n"+   		"        uptmp,  \n"+		"        dm, \n"+		"        t.BBmode, \n"+		"        m.BBtype \n"+		" ; \n";	 		var 	sqlstr = insbbmodelsql + insbbtestsql;	logger.info(sqlstr);			pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				res.json({'success':true});				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.list_agctl = function(req, res){	auth_check(req, res);		logger.info('list_agctl begin....');		var draw = req.query.draw;	var start = req.query.start;	var length = req.query.length;	logger.info(req.query);	logger.info(req.query.search.value);	logger.info(req.query.order[0].column);	logger.info(req.query.order[0].dir);	var orderstr = " order by " + (parseInt(req.query.order[0].column) +1 ) + " " +  req.query.order[0].dir;	var searchstrs = [];	if(req.query.columns[1].search.value.length){		searchstrs.push(" devmodel like '%"+req.query.columns[1].search.value+"%' ");	}	if(req.query.columns[2].search.value.length){		searchstrs.push(" mosver like '%"+req.query.columns[2].search.value+"%' ");		}	if(req.query.columns[3].search.value.length){		searchstrs.push(" pkgnm like '%"+req.query.columns[3].search.value+"%' ");		}	if(req.query.columns[4].search.value.length){		searchstrs.push(" apppkgnm like '%"+req.query.columns[4].search.value+"%' ");		}	if(req.query.columns[5].search.value.length){		searchstrs.push(" playservicemode like '%"+req.query.columns[5].search.value+"%' ");		}	if(req.query.columns[6].search.value.length){		searchstrs.push(" verCode like '%"+req.query.columns[6].search.value+"%' ");		}	if(req.query.columns[7].search.value.length){				searchstrs.push(" bOnOff like '%"+req.query.columns[6].search.value+"%' ");		}		var searcher = "";	if(searchstrs.length>0)		searcher = " and (" + searchstrs.join(" and ") + ") ";	var sqlstr = ""+				" select concat('<span style=\"padding-right:10px;\" class=\"glyphicon glyphicon-folder-open\"></span><b>', devmodel,'   /    ',mosver, '</b><span style=\"padding-left:10px;\">(model code / osversion)</span>') as groupkey, "+				" devmodel, mosver, pkgnm, apppkgnm, playServiceMode, verCode, bOnOff from agctl \n"+				" where 1 " + 				searcher + 				orderstr + 				" limit " + length + " offset " + (parseInt(length)+parseInt(start)-parseInt(length))	logger.info(sqlstr);		var totalsql = "select count(*) as total from agctl where 1 " + searcher + ";";	pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				// logger.info(rows);				var data = [];				_.each(rows, function(row){					var d =[];					_.each(row, function(r){						d.push(r);					});					data.push(d);				});				fnDrawCallback(totalsql, req, res, data, function(complete){					// logger.info('----- complete is ------');					// logger.info(complete);					res.json(complete);				});								if(rows) logger.info('[list_agctl]=>' + rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.update_agctl = function(req, res){	auth_check(req, res);		logger.info('--- exports.update_agctl = function(req, res){ --- ');	logger.info(req.body);	var upagctlsql = 		" update agctl set bOnOff = '"+req.body.bOnOff+"' where devmodel = '"+req.body.devmodel+"' and mosver = '"+req.body.mosver+"' and pkgnm = '"+req.body.pkgnm+"' and apppkgnm = '"+req.body.apppkgnm+"' and playServiceMode = '"+req.body.playServiceMode+"' and verCode = '"+req.body.verCode+"' ; ";	var 	sqlstr = upagctlsql;	logger.info(sqlstr);		pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				res.json({'success':true});				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};exports.update_all_agctl = function(req, res){	auth_check(req, res);		logger.info('--- exports.update_all_agctl = function(req, res){ --- ');	logger.info(req.body);	var searchstrs = [];	_.each(req.body.filter, function(d, i){		if(i == 0 && d != ''){			searchstrs.push(" devmodel like '%"+d+"%' ");		}else if(i == 1 && d != '~217*%'){			searchstrs.push(" mosver like '%"+d+"%' ");			}else if(i == 2 && d != '~217*%'){			searchstrs.push(" pkgnm like '%"+d+"%' ");			}else if(i == 3 && d != '~217*%'){			searchstrs.push(" apppkgnm like '%"+d+"%' ");			}else if(i == 4 && d != '~217*%'){			searchstrs.push(" playservicemode like '%"+d+"%' ");			}else if(i == 5 && d != '~217*%'){			searchstrs.push(" verCode like '%"+d+"%' ");			}else if(i == 6 && d != '~217*%'){					searchstrs.push(" bOnOff like '%"+d+"%' ");			}	});	logger.info('------ searchstrs length is ' + searchstrs.length);	logger.info(searchstrs);	if(searchstrs.length < 2){		res.status(203).send('203');	}		var searcher = "";	if(searchstrs.length>0)		searcher = " and (" + searchstrs.join(" and ") + ") ";	var upagctlsql = 		" update agctl set bOnOff = '"+req.body.bOnOff+"' where 1 " + searcher;	var 	sqlstr = upagctlsql;	logger.info(sqlstr);		pool.getConnection(function(err, connection){		var query = connection.query(sqlstr, function(error, rows){			try{				res.json({'success':true});				if(rows) logger.info(rows.length + ' ROWS found');				connection.release();			}catch(e){				logger.info(e);				connection.release();				throw e;			}		});	});};